<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>殷东亮的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yindongliang.com/"/>
  <updated>2016-07-07T08:16:08.000Z</updated>
  <id>http://yindongliang.com/</id>
  
  <author>
    <name>tcitry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在公司实习一个月来的感悟</title>
    <link href="http://yindongliang.com/2015-11-24-one-month-intern/"/>
    <id>http://yindongliang.com/2015-11-24-one-month-intern/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2016-07-07T08:16:08.000Z</updated>
    
    <content type="html">&lt;p&gt;从上个月开始在&lt;a href=&quot;http://cloudist.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大连云匠&lt;/a&gt;实习，在公司做python后端，一个月来收获了很多。&lt;/p&gt;
&lt;p&gt;首先是开发的流程和规范方面，之前都是自己做东西，除了实现功能外并没有考虑过多的内容。比如完整的测试用例，软件的设计模式，框架的开发标准，数据的初始化与备份，这些都是很重要的东西，在团队协作的时候更能凸显出来，同时还有需要Git熟练使用，基本在公司做的每一步都需要足够的理由去解释为什么才可以这样去做，不像之前就是各种堆放，现在思考的地方更多了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;主要还是技术方面，通过跟随公司负责带我的师哥学习技术细节，每一步都学到了新的知识，尤其在源码的研究上，之前都是调用接口多，现在是每调一个框架的接口，基本都需要把其实现方法大致看一遍，了解内部运行的流程，因为现在我的工作并不多，这样确实比较花费时间，但是通过深层次的源码分析，还是解决了一些关键性的细节问题。知道哪些东西可以继承，哪些必须要自己来实现，都会有更明确的理由。在这种在调试的时候，最是考验编程功底，因为必须要了解程序执行的每一步，才能知道应该去哪里查看代码，有的代码封装在框架里藏的比较深，每次在这些有的自己看来解决不了的坑，师哥都能通过程序运行的每一步进行源码分析来告诉我如何找到问题所在，这就是差距吧，还需不断努力和学习。&lt;/p&gt;
&lt;p&gt;然后另一个深刻的体会就是英文文档了，单词阅读量相比以前提升非常大，看一天下班后有时还是有点头大。。&lt;/p&gt;
&lt;p&gt;最重要的，在公司感受到了很强的压力，周围都是技术非常厉害的人，这样也许才是最好的，不断催促自己继续学习。最后附两条在Python数据格式化相关内容，推荐阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pyformat.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pyformat.info/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://strftime.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://strftime.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从上个月开始在&lt;a href=&quot;http://cloudist.cc&quot;&gt;大连云匠&lt;/a&gt;实习，在公司做python后端，一个月来收获了很多。&lt;/p&gt;
&lt;p&gt;首先是开发的流程和规范方面，之前都是自己做东西，除了实现功能外并没有考虑过多的内容。比如完整的测试用例，软件的设计模式，框架的开发标准，数据的初始化与备份，这些都是很重要的东西，在团队协作的时候更能凸显出来，同时还有需要Git熟练使用，基本在公司做的每一步都需要足够的理由去解释为什么才可以这样去做，不像之前就是各种堆放，现在思考的地方更多了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github上关于iOS开发集合</title>
    <link href="http://yindongliang.com/2015-09-25-github-iOS/"/>
    <id>http://yindongliang.com/2015-09-25-github-iOS/</id>
    <published>2015-09-24T16:00:00.000Z</published>
    <updated>2016-07-19T04:58:12.000Z</updated>
    
    <content type="html">&lt;p&gt;一些别人总结好的东西，汇总一下，平常每次现找都好麻烦。。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KevinHM/ios-good-practices-the-lastest-version&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 开发最佳实践：OC 与 Swift 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipader/SwiftGuide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 语言指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/100mango/zen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 禅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tangqiaoboy/iOSBlogCN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文 iOS/Mac 开发博客列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/icepy/iOS-usefulinformation-zh_CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS-usefulinformation-zh_CN(个人学习iOS开发－阅读收集的资料)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KevinHM/FunctionalReactiveProgrammingOniOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS的函数响应型编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Tim9Liu9/TimLiu-iOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TimLiu-iOS(自己总结的iOS、mac开源项目及库)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipader/SwiftGuide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 语言指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.ibireme.com/github/list/ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ibireme的iOS备忘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vsouza/awesome-ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一些别人总结好的东西，汇总一下，平常每次现找都好麻烦。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>独立软件的付费方式</title>
    <link href="http://yindongliang.com/2015-04-29-price-of-software/"/>
    <id>http://yindongliang.com/2015-04-29-price-of-software/</id>
    <published>2015-04-28T16:00:00.000Z</published>
    <updated>2016-07-07T08:20:57.000Z</updated>
    
    <content type="html">&lt;p&gt;一款软件如果有意图收费，而又不想流失用户，大部分都是采用捐助的模式，让用户自己决定软件捐还是不捐，我认为这样的效果应该不明显，很难激起用户捐助开发者的意愿。而如果采用另一种方式–自由付费，结果应该可以更好一些，因为『捐助』潜意识里灌输给用户的是捐还是不捐的问题，而自由付费，带给用户的潜意识是这款软件值得付费，只是要付多少的问题，这样一方面刺激了用户付费，另一方面还可以给用户选择付费多少的权利，使用户乐于买单。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这样的收费方式对个人开发者不失为一种不错的选择，当然前提是用户支持正版软件。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一款软件如果有意图收费，而又不想流失用户，大部分都是采用捐助的模式，让用户自己决定软件捐还是不捐，我认为这样的效果应该不明显，很难激起用户捐助开发者的意愿。而如果采用另一种方式–自由付费，结果应该可以更好一些，因为『捐助』潜意识里灌输给用户的是捐还是不捐的问题，而自由付费，带给用户的潜意识是这款软件值得付费，只是要付多少的问题，这样一方面刺激了用户付费，另一方面还可以给用户选择付费多少的权利，使用户乐于买单。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vim常用插件</title>
    <link href="http://yindongliang.com/2014-12-25-vim-plugin/"/>
    <id>http://yindongliang.com/2014-12-25-vim-plugin/</id>
    <published>2014-12-24T16:00:00.000Z</published>
    <updated>2016-07-07T08:20:45.000Z</updated>
    
    <content type="html">&lt;p&gt;更新：推荐直接&lt;a href=&quot;https://github.com/spf13/spf13-vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spf-13&lt;/a&gt;省时省心&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;最近觉得在小部分修改代码的时候应该抛弃大型的IDE而转向Vim，下面的图就是我的环境了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/QQ20141213-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于Mac上vim的版本更新，我建议使用Macvim，然后alias命令&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;alias &lt;span class=&quot;keyword&quot;&gt;vi&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alias &lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt;=/Applications/MacVim.app/Contents/MacOS/Vim&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tcitry/my-tools/blob/master/vimrc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在这里&lt;/a&gt;是我的.vimrc的配置。&lt;/p&gt;
&lt;h2 id=&quot;常用插件推荐&quot;&gt;&lt;a href=&quot;#常用插件推荐&quot; class=&quot;headerlink&quot; title=&quot;常用插件推荐&quot;&gt;&lt;/a&gt;常用插件推荐&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gmarik/Vundle.vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vundle&lt;/a&gt;是一个用来部署其他插件的插件，用来更方便的管理其他插件的更新和删除。在.vimrc中如上图编辑vundle部分，保存后在vi中执行&lt;code&gt;:BundleInstall&lt;/code&gt;就能自动安装其他插件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;:PluginList       - 枚举已安装的插件列表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:PluginInstall    - 安装插件或者后面加上&lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;更新&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:PluginUpdate     - 更新插件 同 :PluginInstall!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:PluginSearch foo - 查找插件。例如查找名称为foo的插件。或者后面加&lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;更新本地缓存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:PluginClean      - 清理无用插件或者后面加&lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;自动清理&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-surround&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Surround&lt;/a&gt;用来编辑“hello world”，(button)，这样成对符号格式的字符串，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bling/vim-airline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Airline&lt;/a&gt;是状态栏增强插件，根据上面的示例图可以看到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vim-scripts/AutoClose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoclose&lt;/a&gt;用来输出(),””,{}这样的字符，当我打出左半个，自动输出右半个，人性化的是，当两个符号中间没有其他字符删除左半个右半个也一起删除。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rkulla/pydiction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pydiction&lt;/a&gt;这个插件的python语法自动补全绝对是能替代IDE的理由，十分强悍。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NERDtree&lt;/a&gt;是一个文件管理器插件。这个插件还有个加强版在&lt;a href=&quot;https://github.com/jistr/vim-nerdtree-tabs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。从最上面的图里面可以看到左侧的效果。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Syntastic&lt;/a&gt;用来检查语法错误&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fatih/vim-go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim-go&lt;/a&gt;用来使go语言高亮，而且建议安装vim-go插件后运行&lt;code&gt;:GoInstallBinaries&lt;/code&gt;可以批量安装go内置的几个vim插件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vim-scripts/matrix.vim--Yang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Matrix&lt;/a&gt;绝对是vim插件里最装X的一个，没有之一。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mattn/gist-vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gist-vim&lt;/a&gt;可以向自己的github-gist上传代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/othree/xml.vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xml&lt;/a&gt;可以匹配&amp;lt;&amp;gt;&amp;lt;/&amp;gt;这样的字符成对输出&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;更新：推荐直接&lt;a href=&quot;https://github.com/spf13/spf13-vim&quot;&gt;spf-13&lt;/a&gt;省时省心&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下部署Django应用</title>
    <link href="http://yindongliang.com/2014-12-28-deploy-django-app/"/>
    <id>http://yindongliang.com/2014-12-28-deploy-django-app/</id>
    <published>2014-10-27T16:00:00.000Z</published>
    <updated>2016-07-19T04:58:15.000Z</updated>
    
    <content type="html">&lt;p&gt;做了一个Django小应用，主要内容是一个论坛，源码在&lt;a href=&quot;https://github.com/tcitry/dlpucsdn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;, 经过好几天的研究，也可以在服务器端运行了，以下所有代码中的操作都需要在命令行运行&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装mysql&quot;&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; title=&quot;安装mysql&quot;&gt;&lt;/a&gt;安装mysql&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install mysql-server mysql-client&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据提示设置MySQL root用户密码&lt;/p&gt;
&lt;h2 id=&quot;MySQL设置中文utf8格式-Linux、Mac系统通用&quot;&gt;&lt;a href=&quot;#MySQL设置中文utf8格式-Linux、Mac系统通用&quot; class=&quot;headerlink&quot; title=&quot;MySQL设置中文utf8格式(Linux、Mac系统通用)&quot;&gt;&lt;/a&gt;MySQL设置中文utf8格式(Linux、Mac系统通用)&lt;/h2&gt;&lt;p&gt;一般在&lt;code&gt;/etc/mysql&lt;/code&gt;下&lt;/p&gt;
&lt;p&gt;[client]下添加&lt;code&gt;default-character-set=utf8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[mysqld]下添加&lt;code&gt;character-set-server=utf8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[mysql]下添加&lt;code&gt;default-character-set=utf8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启MySQL &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;service mysql restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入MySQL查看编码 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;show variables like &lt;span class=&quot;string&quot;&gt;&#39;char%&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/image/djangoapp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为MySQL建立远程连接&quot;&gt;&lt;a href=&quot;#为MySQL建立远程连接&quot; class=&quot;headerlink&quot; title=&quot;为MySQL建立远程连接&quot;&gt;&lt;/a&gt;为MySQL建立远程连接&lt;/h2&gt;&lt;p&gt;由于修改数据库时不可能频繁的登服务器在命令行下修改，远程用workbench连接MySQL服务器是更方便的选择，先登入MySQL，授权一个可以远程连接这个数据库的用户名和密码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;GRANT ALL PRIVILEGES ON *.* TO myuser@&amp;apos;%&amp;apos; IDENTIFIED BY &amp;apos;mypassword&amp;apos; WITH GRANT OPTION;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;FLUSH PRIVILEGES;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有的MySQL没有开放远程连接的端口，只允许本地连接，你需要查看my.conf之类的文件，我的在&lt;code&gt;/etc/mysql/my.conf&lt;/code&gt;把&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;-address:127.0.0.1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那行注释掉即可&lt;/p&gt;
&lt;h2 id=&quot;安装pip&quot;&gt;&lt;a href=&quot;#安装pip&quot; class=&quot;headerlink&quot; title=&quot;安装pip&quot;&gt;&lt;/a&gt;安装pip&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pip#downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install python-pip&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装django1-7&quot;&gt;&lt;a href=&quot;#安装django1-7&quot; class=&quot;headerlink&quot; title=&quot;安装django1.7&quot;&gt;&lt;/a&gt;安装django1.7&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;django官网&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install Django==1.7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python进入python2.7解释器&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;import django&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出错说明安装成功&lt;/p&gt;
&lt;h2 id=&quot;安装mysql-python&quot;&gt;&lt;a href=&quot;#安装mysql-python&quot; class=&quot;headerlink&quot; title=&quot;安装mysql-python&quot;&gt;&lt;/a&gt;安装mysql-python&lt;/h2&gt;&lt;p&gt;安装mysql-python注意需要配置&lt;code&gt;mysql_config&lt;/code&gt;我的在(/usr/bin目录下，其他的类似也在bin目录下，视不同系统不同版本而定)如果 &lt;code&gt;/usr/bin&lt;/code&gt;目录下没有&lt;code&gt;mysql_config&lt;/code&gt;，需要安装mysql开发包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install python-setuptools&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libmysqld-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libmysqlclient-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install python-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/MySQL-python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget &lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压zip文件，首先安装unzip&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install unzip&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unzip mysql-python.zip&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; mysql-python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vi site.cfg&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把&lt;code&gt;mysql_config&lt;/code&gt;路径那行取消注释，路径为&lt;code&gt;/usr/bin/mysql_config&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python setup.py build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python setup.py install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进去python解释器&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;import MySQLdb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不报错说明安装成功&lt;/p&gt;
&lt;p&gt;MySQLdb不支持python3，可以试试pymysql，同时在Python3的项目中，需要在&lt;code&gt;__init__.py&lt;/code&gt;中添加&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import pymysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pymysql.install_as_MySQLdb()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是由于Django调用MySQL的接口问题，在setting.py文件中具体为&lt;code&gt;&amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.mysql&amp;#39;,&lt;/code&gt;，仔细查看这句代码就会发现Django默认调用的是MySQLdb，虽然它只支持Python2.0。&lt;/p&gt;
&lt;h2 id=&quot;配置nginx&quot;&gt;&lt;a href=&quot;#配置nginx&quot; class=&quot;headerlink&quot; title=&quot;配置nginx&quot;&gt;&lt;/a&gt;配置nginx&lt;/h2&gt;&lt;p&gt;最重要的就是nginx的配置&lt;/p&gt;
&lt;p&gt;我的配置目录在&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;和&lt;code&gt;/etc/nginx/sites-enable/*&lt;/code&gt;后者可以在前者文件中设置，先查看配置文件&lt;code&gt;/etc/nginx/sites-enable/django&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/nginxsetting.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据自己的应用修改配置文件中static路径，server_name，root等。修改完毕注意要&lt;code&gt;service nginx reload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于静态文件的地址配置还是需要多说一句，nginx中的&lt;code&gt;/static&lt;/code&gt;目录对应的是&lt;code&gt;setting.py&lt;/code&gt;文件中的&lt;code&gt;STATIC_ROOT&lt;/code&gt;目录，两个写一样的，执行&lt;code&gt;python manage.py collectstatic&lt;/code&gt;收集的文件是admin后台模块的静态样式文件，执行完后这些静态文件就被复制在你设置的&lt;code&gt;STATIC_ROOT&lt;/code&gt;目录了。&lt;/p&gt;
&lt;h2 id=&quot;部署代码&quot;&gt;&lt;a href=&quot;#部署代码&quot; class=&quot;headerlink&quot; title=&quot;部署代码&quot;&gt;&lt;/a&gt;部署代码&lt;/h2&gt;&lt;p&gt;因为我的代码在github，先安装git&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/tcitry/dlpucsdn.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;部署以后注意修改数据库密码，邮件服务器密码，debug模式False，template_debug模式为False。&lt;/p&gt;
&lt;h2 id=&quot;virtualenv&quot;&gt;&lt;a href=&quot;#virtualenv&quot; class=&quot;headerlink&quot; title=&quot;virtualenv&quot;&gt;&lt;/a&gt;virtualenv&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install virtualenv&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据网上现有的教程简单看看virtualenv的使用很容易理解，在项目依赖的相关程序配置过程中需要始终开着virtualenv。&lt;/p&gt;
&lt;h2 id=&quot;配置Gunicorn&quot;&gt;&lt;a href=&quot;#配置Gunicorn&quot; class=&quot;headerlink&quot; title=&quot;配置Gunicorn&quot;&gt;&lt;/a&gt;配置Gunicorn&lt;/h2&gt;&lt;p&gt;查看这个&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-django-one-click-install-image&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;修改为自己的应用参数&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;service gunicorn restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当部署一个应用时可以将配置文件放在&lt;code&gt;/etc/init.d/gunicorn.conf&lt;/code&gt;文件里面。但同时部署多个文件的时候，可以使用supervisor+gunicorn+virtualenv的部署方式，这样可以在每个不同的项目目录利用virtualenv为每个应用配置不同的环境，同时可以使服务器的环境更加易于管理。&lt;/p&gt;
&lt;p&gt;先在项目的根目录测试一下，确保gunicorn安装正确，&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;../bin/gunicorn myapp.wsgi:application&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出错就说明正确了，出错一般是提示没有那个module名，检查一下django是否安装，执行命令的文件目录是否正确。&lt;/p&gt;
&lt;h2 id=&quot;supervisor的使用&quot;&gt;&lt;a href=&quot;#supervisor的使用&quot; class=&quot;headerlink&quot; title=&quot;supervisor的使用&quot;&gt;&lt;/a&gt;supervisor的使用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install supervisor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo vim /etc/supervisord.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑的内容如下，请自行修改项目和目录名。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[program:classroom]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; = sh /home/projects/classroom/classroom/gunicorn_start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user = root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redirect_stderr = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;autorestart = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置这个gunicorn_start.sh&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /home/projects/classroom/classroom&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;../bin/gunicorn classroom.wsgi:application -w 4 -b :8000&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动supervisor&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/init.d/supervisord start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他方式&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;supervisorctl start &amp;lt;name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;supervisorctl stop &amp;lt;name&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装七牛云SDK&quot;&gt;&lt;a href=&quot;#安装七牛云SDK&quot; class=&quot;headerlink&quot; title=&quot;安装七牛云SDK&quot;&gt;&lt;/a&gt;安装七牛云SDK&lt;/h2&gt;&lt;p&gt;由于网站的静态存储要用七牛云，在运行程序前要安装否则报错没有qiniu SDK的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install qiniu&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;七牛云安装前注意安装的版本，我被坑过一次，写程序时是6.0版本，部署时都7.0了，接口全都不一样。&lt;/p&gt;
&lt;h2 id=&quot;还有&quot;&gt;&lt;a href=&quot;#还有&quot; class=&quot;headerlink&quot; title=&quot;还有&quot;&gt;&lt;/a&gt;还有&lt;/h2&gt;&lt;p&gt;还有不推荐cloudflare等国外CDN加速，亲身体验。&lt;/p&gt;
&lt;p&gt;还有推荐下这篇来自digitalocean的&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-django-with-postgres-nginx-and-gunicorn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;部署实例&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;做了一个Django小应用，主要内容是一个论坛，源码在&lt;a href=&quot;https://github.com/tcitry/dlpucsdn&quot;&gt;Github&lt;/a&gt;, 经过好几天的研究，也可以在服务器端运行了，以下所有代码中的操作都需要在命令行运行&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这个博客</title>
    <link href="http://yindongliang.com/2014-09-22-this-blog/"/>
    <id>http://yindongliang.com/2014-09-22-this-blog/</id>
    <published>2014-09-21T16:00:00.000Z</published>
    <updated>2016-07-07T08:48:38.000Z</updated>
    
    <content type="html">&lt;p&gt;关于我的博客，技术架构上已经有了很多的版本，我对做一个自己的博客是这么的着迷，现在想一想，如果不是真的想做，是不可能这么折腾的。&lt;/p&gt;
&lt;p&gt;记得最早是在大一的时候，先是经常看Csdn和博客园的博客，自己也在上面写了一些学习笔记，后来看到&lt;a href=&quot;http://coolshell.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;酷壳&lt;/a&gt;做的非常好，接着就发现了Wordpress，然后在寒假赶在开学前一个星期做出了一个和酷壳一样的Wordpress博客，随便买了个虚拟主机，并且用我的名字注册了域名，那个时候感觉vps还是很贵很高大上的东西。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;搭建博客这个东西，开始一发不可收拾。大二时Github异常火爆，不可避免的，发现了Github Pages这个东西，同时也是经常看&lt;a href=&quot;http://yinwang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;王垠的博客&lt;/a&gt;，于是开始了用Jekyll来生成静态博客，然后提交到我的&lt;a href=&quot;https://github.com/tcitry/tcitry.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tcitry.github.io&lt;/a&gt;项目中，也是这一段时间学会了用Git这个会使幸福感提升N倍的代码管理工具。&lt;/p&gt;
&lt;p&gt;然后呢，大三上学期的时候，在我忍受Github龟速的同时，国内的Git社区已经非常成熟了，有非常多的组织和公司推出了Git服务，但很少能有像Github这样各方面都很贴心和高大上的，直到我从Oschina，Csdn，Gitcafe，Gitshell等众多社区中发现了Coding，Coding从UI到功能做的都非常全面，另一方面在教育网和移动网的访问速度非常快，还有演示功能，相当于一个App Engine了。以前我在github提交代码的时候光等&lt;code&gt;git push&lt;/code&gt;完事就要好久，现在在Coding绝对是秒秒钟的事，心情顺畅了很多，现在我一些私有的项目就都托管在Coding了。&lt;/p&gt;
&lt;p&gt;话说回来，我在大三寒假发现了一个新的静态网页生成器–Hexo，是台湾一个大学生用Node.Js写的，试用了以后果断放弃了Jekyll，投入Hexo怀抱，用Hexo感觉很酷的样子，每次在本地用Markdown编辑器写完博客，&lt;code&gt;hexo g&lt;/code&gt;、&lt;code&gt;hexo d&lt;/code&gt;直接就部署在Coding了，还备份了文件，感觉以后终于可以不再折腾了。可是，好景不长，因为我遇见了Ghost(也是Node.Js系)。。。&lt;/p&gt;
&lt;p&gt;终究是我这个人在做博客的时候有一颗追求完美的心(这是病，得治)，不想停下来，而且花费了大量的时间，为什么选择Ghost呢，它一需要自己部署，二需要花钱养着Vps，三还得经常备个份。我觉得，Ghost可以让我专注博客，而不是在模板，样式上花费太多的时间，顶多就是部署程序的时候稍微费点心，备份文件也需要点工夫，仅此而已，可以接受，话说我还是挺喜欢在自己的服务器上折腾Linux的东西，另外我在Github Pack上面拿到了Digitalocean的$100和Namecheap的一年SSL证书，可以用一段时间了。可是这样说着说着好像自己又绕了回来，怎么和Wordpress有点像呢，都是搭建服务器，这大学三年就没点进步？额，可是我确实通过这些学到了很多前端的知识。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;现在博客的架构是：Ghost中文版，服务器是部署在Digitalocean的纽约3号服务器（我不会告诉你纽约的服务器比旧金山不知稳定多少，亲身体验），环境是Ubuntu14.04+Nginx+MySQL，图片等静态资源存储在七牛云，域名和SSL证书是从Namecheap购得，至于这个Https，除了逼格高之外，对避免被墙也有一定作用。&lt;/del&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于我的博客，技术架构上已经有了很多的版本，我对做一个自己的博客是这么的着迷，现在想一想，如果不是真的想做，是不可能这么折腾的。&lt;/p&gt;
&lt;p&gt;记得最早是在大一的时候，先是经常看Csdn和博客园的博客，自己也在上面写了一些学习笔记，后来看到&lt;a href=&quot;http://coolshell.cn&quot;&gt;酷壳&lt;/a&gt;做的非常好，接着就发现了Wordpress，然后在寒假赶在开学前一个星期做出了一个和酷壳一样的Wordpress博客，随便买了个虚拟主机，并且用我的名字注册了域名，那个时候感觉vps还是很贵很高大上的东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
